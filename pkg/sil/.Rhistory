getwd()
source("R/read.dictionary.R")
source("R/read.dictionary.R")
read.text("data/text.txt")
source("R/read.dictionary.R")
read.text("data/text.txt")
source("R/read.dictionary.R")
read.text("data/text.txt")
?grep
source("R/read.dictionary.R")
source("R/read.dictionary.R")
?grep
read.text("data/text.txt")
source("R/read.dictionary.R")
source("R/read.dictionary.R")
read.text("data/text.txt")
source("R/read.dictionary.R")
read.text("data/text.txt")
source("R/read.dictionary.R")
read.text("data/text.txt")
read.text("data/text.txt")[1:10]
read.text("data/text.txt")
source("R/read.dictionary.R")
read.text("data/text.txt")
source("R/read.dictionary.R")
read.text("data/text.txt")
source("R/read.dictionary.R")
read.text("data/text.txt")
source("R/read.dictionary.R")
read.text("data/text.txt")
source("R/read.dictionary.R")
read.text("data/text.txt")
source("R/read.dictionary.R")
read.text("data/text.txt")
source("R/read.dictionary.R")
read.text("data/text.txt")
source("R/read.dictionary.R")
read.text("data/text.txt")
source("R/read.dictionary.R")
read.text("data/text.txt")
source("R/read.dictionary.R")
read.text("data/text.txt")
b <- read.text("data/text.txt")
read.text("data/text.txt")
source("R/read.dictionary.R")
read.text("data/text.txt")
source("R/read.dictionary.R")
read.text("data/text.txt")
source("R/read.dictionary.R")
read.text("data/text.txt")
source("R/read.dictionary.R")
read.text("data/text.txt")
source("R/read.dictionary.R")
read.text("data/text.txt")
source("R/read.dictionary.R")
source("R/read.dictionary.R")
read.text("data/text.txt")
a <- read.text("data/text.txt")
a
View(a)
a
source("R/read.dictionary.R")
read.text("data/text.txt")
source("R/read.dictionary.R")
read.text("data/text.txt")
source("R/read.dictionary.R")
read.text("data/text.txt")
source("R/read.dictionary.R")
read.text("data/text.txt")
source("R/read.dictionary.R")
a <- read.text("data/text.txt")
a
source("R/read.dictionary.R")
a
a <- read.text("data/text.txt")
a
lapply(a,
)
source("R/read.dictionary.R")
a <- read.text("data/text.txt")
lapply(a, `[[` "mb"
)
lapply(a, `[[` "mb")
lapply(a, `[` "mb")
lapply(a, `$` "mb")
lapply(a, function(x) x["mb"])
sapply(a, function(x) x["mb"])
a
a
table(unlist(sapply(a, function(x) x["mb"])))
View(table(unlist(sapply(a, function(x) x["mb"]))))
source("R/read.dictionary.R")
a <- read.text("data/text.txt")
x <- sapply(a, function(x) x["mb", "ge"])
x <- sapply(a, function(x) x[c("mb", "ge")])
x
x <- lapply(a, function(x) x[c("mb", "ge")])
x
lapply(x, paste, x$mb, x$ge)
lapply(x, function(x) paste(x$mb, x$ge)
)
lapply(x, function(x) paste(x$mb, x$ge))
pair <- lapply(x, function(x) paste(x$mb, x$ge, sep="--"))
View(pair)
pair
pair <- table(unlist(pair))
View(pair)
x <- lapply(a, function(x) x[c("mb", "ge")])
pair <- lapply(x, function(x) paste(x$eg, x$mb, sep="--"))
pair <- table(unlist(pair))
pair <- pair[ordered(pair)]
View(pair)
pair <- table(unlist(pair))
x <- lapply(a, function(x) x[c("mb", "ge")])
pair <- lapply(x, function(x) paste(x$eg, x$mb, sep="--"))
pair <- table(unlist(pair))
head(pair)
pair <- pair[ordered(names(pair)]
pair <- pair[ordered(names(pair))]
head(pair)
View(pair)
pair <- lapply(x, function(x) paste(x$ge, x$mb, sep="--"))
pair <- table(unlist(pair))
pair <- pair[ordered(names(pair))]
View(pair)
entry <- read.dictionary('/Users/sylvainloiseau/Recherche/Terrain/Corpus/Transcriptions/Toolbox/Dictionary.txt')
names(entry)
x
x <- c("un", "deux")
x
append("zéro", x, "trois")
x("zéro", x, "trois")
c("zéro", x, "trois")
source("R/read.dictionary.R")
a <- read.text("data/text.txt")
source("R/ngram.R")
.make.morphem.ngram(a)
.make.morphem.ngram <- function(corpus) {
corpus <- lapply(corpus, function(x) {x["mb"]});
corpus <- lapply(corpus, function(x) {c("#", x["mb"], "#")});
ngram <- .make.ngram(corpus);
id <- unlist(sapply(ngram, sapply, `[`, 2))
ngram <- unlist(lapply(ngram, sapply, paste, collapse=""))
ngram <- split(ngram, f=id)
ngram <- lapply(ngram, table)
return(ngram)
}
.make.morphem.ngram <- function(corpus) {
corpus <- lapply(corpus, function(x) {x["mb"]});
corpus <- lapply(corpus, function(x) {c("#", x["mb"], "#")});
print(corpus[1:2])
ngram <- .make.ngram(corpus);
id <- unlist(sapply(ngram, sapply, `[`, 2))
print(id)
ngram <- unlist(lapply(ngram, sapply, paste, collapse=""))
ngram <- split(ngram, f=id)
ngram <- lapply(ngram, table)
return(ngram)
}
.make.morphem.ngram(a)
.make.morphem.ngram <- function(corpus) {
corpus <- lapply(corpus, function(x) {x["mb"]});
corpus <- lapply(corpus, function(x) {c("#", x["mb"], "#")});
print(corpus[1:2])
ngram <- .make.ngram(corpus);
id <- unlist(sapply(ngram, sapply, `[`, 2))
print(id[1:10])
ngram <- unlist(lapply(ngram, sapply, paste, collapse=""))
ngram <- split(ngram, f=id)
ngram <- lapply(ngram, table)
return(ngram)
}
.make.morphem.ngram(a)
a[1:1°]
a[1:10]
corpus <- lapply(a, function(x) {x["mb"]});
corpus[1:2]
corpus <- lapply(corpus, function(x) {c("#", x["mb"], "#")});
corpus[1:3]
corpus <- lapply(a, function(x) {x["mb"]});
corpus <- lapply(corpus, function(x) {c("#", x[["mb"]], "#")});
corpus[1:3]
ngram <- .make.ngram(corpus);
ngram[1:2]
id <- unlist(sapply(ngram, sapply, `[`, 2))
head(id)
ngram <- unlist(lapply(ngram, sapply, paste, collapse=""))
ngram[1:2]
ngram <- unlist(lapply(ngram, sapply, paste, collapse="-"))
.make.morphem.ngram <- function(corpus) {
corpus <- lapply(corpus, function(x) {x["mb"]});
corpus <- lapply(corpus, function(x) {c("#", x[["mb"]], "#")});
ngram <- .make.ngram(corpus);
id <- unlist(sapply(ngram, sapply, `[`, 2))
ngram <- unlist(lapply(ngram, sapply, paste, collapse="-"))
ngram <- split(ngram, f=id)
ngram <- lapply(ngram, table)
return(ngram)
}
mngram <- .make.morphem.ngram(a)
mngram
.make.table <- function(ngram.table) {
cat("<html>", file="out_mngram.html", append=FALSE)
names <- names(ngram.p.t)
for (i in 1:(length(ngram.p.t))) {
HTML(paste("<h1>/", names[i], "/</h1>"), file="out.html");
t <- ngram.p.t[[i]];
m <- as.matrix(t);
m <- m[order(m[,1], decreasing=T),, drop=F]
HTML(m, file="out.html")
}
cat("</html>", file="out.html", append=TRUE)
}
.make.table(mngram)
.make.table <- function(ngram.table) {
cat("<html>", file="out_mngram.html", append=FALSE)
names <- names(ngram.table)
for (i in 1:(length(ngram.table))) {
HTML(paste("<h1>/", names[i], "/</h1>"), file="out.html");
t <- ngram.table[[i]];
m <- as.matrix(t);
m <- m[order(m[,1], decreasing=T),, drop=F]
HTML(m, file="out.html")
}
cat("</html>", file="out.html", append=TRUE)
}
.make.table(mngram)
.make.table <- function(ngram.table) {
f <- "out_mngram.html";
cat("<html>", file=f, append=FALSE)
names <- names(ngram.table)
for (i in 1:(length(ngram.table))) {
HTML(paste("<h1>/", names[i], "/</h1>"), file=f);
t <- ngram.table[[i]];
m <- as.matrix(t);
m <- m[order(m[,1], decreasing=T),, drop=F]
HTML(m, file=f)
}
cat("</html>", file=f, append=TRUE)
}
.make.table(mngram)
