{
    "contents" : "# source(\"R/read.dictionary.R\")\n# a <- read.text(\"data/text.txt\")\n# View(table(unlist(sapply(a, function(x) x[\"mb\"]))))\n\n# x <- lapply(a, function(x) x[c(\"mb\", \"ge\")])\n# pair <- lapply(x, function(x) paste(x$mb, x$ge, sep=\"--\"))\n# pair <- table(unlist(pair))\n# View(pair)\n\n## classé par glose\n#x <- lapply(a, function(x) x[c(\"mb\", \"ge\")])\n#pair <- lapply(x, function(x) paste(x$ge, x$mb, sep=\"--\"))\n#pair <- table(unlist(pair))\n#pair <- pair[ordered(names(pair))]\n#View(pair)\n\nread.text <- function(url) {\n  debug <- F\n   field_merged <- .get.merged.lines(url);\n#\tid <- .get.id(url, \"id\")\n   field_merged <- .remove.header(field_merged, \"ref\");\n   entry <- .group.by.key(field_merged, \"ref\");\n   if (debug) print (\"entry:\")\n    if (debug) print(entry[1:2])\n\n   # extract field name\n   field_name <- lapply(entry, substr, start=2, stop=3)\nif (debug) print(\"field_name\")   \nif (debug) print(field_name[1:2])\n   \n\n   len <- length(entry)\n   if (debug) len <- 2\nfor (i in 1:len) {\n  if (debug) print(\"itération\")\n  if (debug) print(i)\n  \n  \n  is.splittable <- grep(x=field_name[[i]], pattern=\"^(tx|mb|ge|ps)\")\n\t\t\n    if (debug) print(\"is.splittable\")\n\t\tif (debug) print(is.splittable)\n\n    x <- entry[[i]]\n  names(x) <- field_name[[i]];\n  if (debug) print(\"x\")\n\t\tif (debug) print(x)\n\t\tx <- substr(x, start=5, stop=nchar(x, type=\"c\"));\n  if (debug) print(\"x après suppression des premiers caractères\")\n  if (debug) print(x)\n  x <- as.list(x);\n  if (debug) print(\"x as list\")\n  if (debug) print(x)\n  \n\t\ty <- lapply(x[is.splittable], strsplit, split=\" +\")\n  if (debug) print(\"y\")\n  if (debug) print(y)\n  for (z in 1:length(is.splittable)) {\n      x[is.splittable[z]] <- y[[z]]\n    }\n    \n     entry[[i]] <- x\n   }\n\treturn(entry)\n}\n\nread.dictionary <- function (url) {\n  \n  field_merged <- .get.merged.lines(url);\n  \n  field_merged <- .remove.header(field_merged, \"lx\");\n  \n  entry <- .group.by.key(field_merged, \"lx\");\n  \n  # extract field name\n  field_name <- lapply(entry, substr, start=2, stop=3)\n  \n  # extract field value\n  for (i in 1:length(entry)) {\n    x <- entry[[i]];\n    x <- substr(x, start=5, stop=nchar(x, type=\"c\"));\n    entry[[i]] <- x\n  }\n  \n  # add field names to value\n  for (i in 1:length(entry)) {\n    x <- entry[[i]];\n    names(x) <- field_name[[i]];\n    entry[[i]] <- x\n  }\n  return(entry)\n}\n\n# read and collapse multi-line fields into one line.\n.get.merged.lines <- function(url) {\n   l <- readLines(url)\n   field_index <- grep(pattern = \"^\\\\\\\\\", x=l, perl=TRUE)\n   length_field <- c(field_index[2:length(field_index)] - field_index[1:(length(field_index)-1)], (length(l)+1) - field_index[length(field_index)]);\n   field_id <- rep(1:length(field_index), length_field)\n   field <- split(l, field_id)\n   field_merged <- sapply(field, paste, collapse=\" \");\n\treturn(field_merged);\n}\n\n.remove.header <- function(field, key) {\n\t# group fields by entry.\n\tkey <- paste(\"^\\\\\\\\\", key, sep=\"\");\n\twhile(! grepl(pattern=key, x=field[1], perl=T)) {\n  \t field <- field[-1];\n\t}\n\treturn(field);\n}\n\n\n.get.id <- function(data, key) {\n\tkey <- paste(\"^\\\\\\\\\", key, sep=\"\");\n\tid_index <- grep(pattern = key, x=data, perl=TRUE)\n\tif (length(id_index) != 1) {\n\t\tstop(paste(\"more than one id (\", length(id_index), \" \", key,\")\"));\n\t}\n\treturn(data[id_index]);\n}\n\n.group.by.key <- function(data, key) {\n\tkey <- paste(\"^\\\\\\\\\", key, sep=\"\");\n\tentry_index <- grep(pattern = key, x=data, perl=TRUE)\n\tlength_entry <- c(entry_index[2:length(entry_index)] - entry_index[1:(length(entry_index)-1)], (length(data)+1) - entry_index[length(entry_index)]);\n\tentry_id <- rep(1:length(entry_index), length_entry)\n\tdata <- split(data, entry_id)\n\treturn(data);\n}\n\n",
    "created" : 1427728323223.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "3643821618",
    "id" : "2A292D75",
    "lastKnownWriteTime" : 1427742515,
    "path" : "~/Recherche/Corpus/workspace/LexicalStat/Current/pkg/sil/R/read.dictionary.R",
    "project_path" : "R/read.dictionary.R",
    "properties" : {
    },
    "source_on_save" : false,
    "type" : "r_source"
}